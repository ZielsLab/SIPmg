afe_n = temp %>%
select(OTU, A, A_mean, A_sd) %>% setNames(c("OTU", "A_10", "A_mean_10", "A_sd_10")) %>%
inner_join(temp_n_100 %>% select(OTU, A, A_mean, A_sd) %>% rename("A_mean_100" = "A_mean",
"A_sd_100" = "A_sd")) %>%
inner_join(temp_n_1000 %>% select(OTU, A, A_mean, A_sd) %>% rename("A_mean_1000" = "A_mean",
"A_sd_1000" = "A_sd")) %>%
inner_join(temp_n_10000 %>% select(OTU, A, A_mean, A_sd) %>% rename("A_mean_10000" = "A_mean",
"A_sd_10000" = "A_sd"))
afe_qsip = afe_n %>%
select(OTU, A)
afe_mean = afe_n %>%
select(contains(c("OTU", "mean"))) %>%
pivot_longer(cols = contains("A_mean"), names_to = "mean", values_to = "AFE_mean")
afe_sd = afe_n %>%
select(contains(c("OTU", "sd"))) %>%
pivot_longer(cols = contains("A_sd"), names_to = "std", values_to = "AFE_sd")
afe_mean_sd = inner_join(afe_qsip, cbind(afe_mean %>% select(OTU, mean, AFE_mean), afe_sd %>% select(std, AFE_sd)))
afe_n = temp %>%
select(OTU, A, A_mean, A_sd) %>% setNames(c("OTU", "A_10", "A_mean_10", "A_sd_10")) %>%
inner_join(temp_n_100 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_100" = "A_mean",
"A_sd_100" = "A_sd")) %>%
inner_join(temp_n_1000 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_1000" = "A_mean",
"A_sd_1000" = "A_sd")) %>%
inner_join(temp_n_10000 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_10000" = "A_mean",
"A_sd_10000" = "A_sd"))
afe_qsip = afe_n %>%
select(OTU, A)
afe_n = temp %>%
select(OTU, A, A_mean, A_sd) %>% setNames(c("OTU", "A", "A_mean_10", "A_sd_10")) %>%
inner_join(temp_n_100 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_100" = "A_mean",
"A_sd_100" = "A_sd")) %>%
inner_join(temp_n_1000 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_1000" = "A_mean",
"A_sd_1000" = "A_sd")) %>%
inner_join(temp_n_10000 %>% select(OTU, A_mean, A_sd) %>% rename("A_mean_10000" = "A_mean",
"A_sd_10000" = "A_sd"))
afe_qsip = afe_n %>%
select(OTU, A)
afe_mean = afe_n %>%
select(contains(c("OTU", "mean"))) %>%
pivot_longer(cols = contains("A_mean"), names_to = "mean", values_to = "AFE_mean")
afe_sd = afe_n %>%
select(contains(c("OTU", "sd"))) %>%
pivot_longer(cols = contains("A_sd"), names_to = "std", values_to = "AFE_sd")
afe_mean_sd = inner_join(afe_qsip, cbind(afe_mean %>% select(OTU, mean, AFE_mean), afe_sd %>% select(std, AFE_sd)))
View(afe_mean_sd)
afe_mean_sd = inner_join(afe_qsip, cbind(afe_mean %>% select(OTU, mean, AFE_mean), afe_sd %>% select(std, AFE_sd))) %>%
mutate(cov = AFE_sd/AFE_mean)
afe_mean_sd %>%
ggplot(aes(OTU, cov)) +
geom_point() +
facet_grid(~mean)
afe_mean_sd = inner_join(afe_qsip, cbind(afe_mean %>% select(OTU, mean, AFE_mean), afe_sd %>% select(std, AFE_sd))) %>%
mutate(cov = AFE_sd*100/AFE_mean)
afe_mean_sd %>%
ggplot(aes(OTU, cov)) +
geom_point() +
facet_grid(~mean)
View(temp_n_1000)
temp_n_1000_1 = temp_n_1000 %>% mutate(cov = A_sd*100/A_mean)
View(temp_n_1000_1)
temp_n_1000_1 = temp_n_1000 %>% mutate(cov = abs(A_sd*100/A_mean))
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
message <- temp_n_1000 %>%
filter(cov > 30) %>%
nrow() > 1 %>%
ifelse({{ . }} %in% c(TRUE),
"The coefficient of variation of bootstrapped values is >30%. To get stricter inferences and narrower confidence intervals, please consider increasing the number of bootstraps. With narrower confidence intervals, you may have a lower false positive rate.",
"")
temp_n_1000
temp_n_1000 %>%
filter(cov > 30) %>%
nrow()
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30)
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1 %>%
ifelse({{ . }} %in% c(TRUE),
"The coefficient of variation of bootstrapped values is >30%. To get stricter inferences and narrower confidence intervals, please consider increasing the number of bootstraps. With narrower confidence intervals, you may have a lower false positive rate.",
"")
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
message <- temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1 %>%
ifelse({{ . }} %in% c(TRUE),
"The coefficient of variation of bootstrapped values is >30%. To get stricter inferences and narrower confidence intervals, please consider increasing the number of bootstraps. With narrower confidence intervals, you may have a lower false positive rate.",
"")
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30)
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow()
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
message <- temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1 %>%
ifelse({{ . }} %in% c(TRUE),
"The coefficient of variation of bootstrapped values is >30%. To get stricter inferences and narrower confidence intervals, please consider increasing the number of bootstraps. With narrower confidence intervals, you may have a lower false positive rate.",
"")
# Print the message if applicable
if (message != "") {
message(message)
}
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
message <- temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
filter(cov > 30) %>%
nrow() > 1 %>%
ifelse({{ . }} %in% c(TRUE),
"The coefficient of variation of bootstrapped values is >30%. To get stricter inferences and narrower confidence intervals, please consider increasing the number of bootstraps. With narrower confidence intervals, you may have a lower false positive rate.",
NA)
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
if (boot_atomX %>%
mutate(cov = A_sd*100/A_mean) %>%
summarise(count = sum(cov > 30)) %>%
pull(count) > 1) {
# Print a message if condition is met
message("The coefficient of variation of bootstrapped values is >30%.
To get more stricter inferences and narrower confidence intervals,
please consider increasing the number of bootstraps.
With narrower confidence intervals, you may have a lower false positive rate.")
}
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
if (temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
summarise(count = sum(cov > 30)) %>%
pull(count) > 1) {
# Print a message if condition is met
message("The coefficient of variation of bootstrapped values is >30%.
To get more stricter inferences and narrower confidence intervals,
please consider increasing the number of bootstraps.
With narrower confidence intervals, you may have a lower false positive rate.")
}
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
summarise(count = sum(cov > 30)
)
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean)
temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean) %>%
summarise(count = sum(cov > 30))
a = temp_n_1000 %>%
mutate(cov = A_sd*100/A_mean)
View(a)
# Check for more than one value > 30 in "cov" column of "boot_atomX" data table
if (temp_n_1000 %>%
mutate(cov = abs(A_sd*100/A_mean)) %>%
summarise(count = sum(cov > 30)) %>%
pull(count) > 1) {
# Print a message if condition is met
message("The coefficient of variation of bootstrapped values is >30%.
To get more stricter inferences and narrower confidence intervals,
please consider increasing the number of bootstraps.
With narrower confidence intervals, you may have a lower false positive rate.")
}
colnames(temp_n_100)
b = temp_n_1000_1 %>% dplyr::select(-c(contains("bonferroni"),A_CI_low,A_CI_high, delbd_sd))
View(b)
?pull
?abs
View(temp_n_1000)
library(SIPmg)
library(SIPmg)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#Load required libraries
#list.of.packages <- c("tidyverse", "HTSSIP", "ggpubr","data.table")
#new.packages <- list.of.packages[!(list.of.packages %in% #installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages, quiet = TRUE, #dependencies = TRUE, repos = "http://cran.us.r-project.org")
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("phyloseq")
#BiocManager::install("EBImage")
#library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(ggpubr)
library(SIPmg)
set.seed(seed = 1000)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- readr::read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions = readr::read_csv("mock_input_data/fractions.csv")
fractions.15N = readr::read_csv("mock_input_data/fractions_15N.csv")
taxonomy_tibble = dplyr::bind_rows(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if it has not been done yet
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag_tab_scaled$plots$plots[[1]]
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = SIPmg::tax.table(taxonomy_tibble) # Create a taxonomy phyloseq object
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
samples.object.15N = SIPmg::sample.table(fractions.15N)
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object)
phylo.qSIP.15N = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object.15N) # Make a phyloseq table for downstream qSIP analysis
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',isotope = "13C",
treatment_rep='Replicate',
Gi = GC_content)
atomX.15N = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP.15N,
control_expr='Isotope=="14N"',isotope = "15N",
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content, isotope = "13C", show_delbd_AFE = FALSE)
df_atomX_boot.15N = SIPmg::qSIP_bootstrap_fcr(atomX.15N, n_boot=10, Gi = GC_content, isotope = "15N")#Change "parallel = FALSE" to compute using a single-core
CI_threshold = 0
df_atomX_boot = df_atomX_boot %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
df_atomX_boot.15N = df_atomX_boot.15N %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
(atom_f_excess_plot = ggplot2::ggplot(df_atomX_boot, aes(OTU, A, ymin=A_CI_fcr_low, ymax=A_CI_fcr_high, color=Incorporator)) +
geom_pointrange(size=0.25) +
geom_linerange() +
geom_hline(yintercept=0, linetype='dashed', alpha=0.5) +
labs(x='MAGs', y='Atom fraction excess') +
theme_bw() +
coord_flip() +
ggtitle("Isotope incorporating MAGs"))
ggplot2::ggsave(filename = "atom_fration_excess.pdf", plot = atom_f_excess_plot)
#Get incorporator info
n_incorp = df_atomX_boot %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
n_incorp.15N = df_atomX_boot.15N %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
#Get incorporator list
incorporator_list = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot)
incorporator_list.15N = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot.15N)
#Print incorporator information
cat('Number of incorporators:', n_incorp, '\n')
cat('Number of incorporators if isotope were 15N:', n_incorp.15N, '\n')
print(incorporator_list, n = nrow(incorporator_list))
print(incorporator_list.15N, n = nrow(incorporator_list.15N))
##Load data
#Coverage data
f_tibble <- readr::read_csv("mock_input_data/coverages_outliers.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequin_meta_outliers.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/seq_dilution_outliers.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 50
mag_tab_scaled_rlm <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab_scaled_lm <- SIPmg::scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE, save_plots = FALSE)
temp = df_atomX_boot
View(taxonomy_tibble)
View(temp)
library(SIPmg)
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 50
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#Load required libraries
#list.of.packages <- c("tidyverse", "HTSSIP", "ggpubr","data.table")
#new.packages <- list.of.packages[!(list.of.packages %in% #installed.packages()[,"Package"])]
#if(length(new.packages)) install.packages(new.packages, quiet = TRUE, #dependencies = TRUE, repos = "http://cran.us.r-project.org")
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("phyloseq")
#BiocManager::install("EBImage")
#library(tidyverse)
library(phyloseq)
library(HTSSIP)
library(ggpubr)
library(SIPmg)
set.seed(seed = 1000)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- readr::read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions = readr::read_csv("mock_input_data/fractions.csv")
fractions.15N = readr::read_csv("mock_input_data/fractions_15N.csv")
taxonomy_tibble = dplyr::bind_rows(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if it has not been done yet
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag_tab_scaled$plots$plots[[1]]
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = SIPmg::tax.table(taxonomy_tibble) # Create a taxonomy phyloseq object
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
samples.object.15N = SIPmg::sample.table(fractions.15N)
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object)
phylo.qSIP.15N = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object.15N) # Make a phyloseq table for downstream qSIP analysis
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',isotope = "13C",
treatment_rep='Replicate',
Gi = GC_content)
atomX.15N = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP.15N,
control_expr='Isotope=="14N"',isotope = "15N",
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content, isotope = "13C", show_delbd_AFE = FALSE)
df_atomX_boot.15N = SIPmg::qSIP_bootstrap_fcr(atomX.15N, n_boot=10, Gi = GC_content, isotope = "15N")#Change "parallel = FALSE" to compute using a single-core
CI_threshold = 0
df_atomX_boot = df_atomX_boot %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
df_atomX_boot.15N = df_atomX_boot.15N %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
(atom_f_excess_plot = ggplot2::ggplot(df_atomX_boot, aes(OTU, A, ymin=A_CI_fcr_low, ymax=A_CI_fcr_high, color=Incorporator)) +
geom_pointrange(size=0.25) +
geom_linerange() +
geom_hline(yintercept=0, linetype='dashed', alpha=0.5) +
labs(x='MAGs', y='Atom fraction excess') +
theme_bw() +
coord_flip() +
ggtitle("Isotope incorporating MAGs"))
ggplot2::ggsave(filename = "atom_fration_excess.pdf", plot = atom_f_excess_plot)
#Get incorporator info
n_incorp = df_atomX_boot %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
n_incorp.15N = df_atomX_boot.15N %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
#Get incorporator list
incorporator_list = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot)
incorporator_list.15N = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot.15N)
#Print incorporator information
cat('Number of incorporators:', n_incorp, '\n')
cat('Number of incorporators if isotope were 15N:', n_incorp.15N, '\n')
print(incorporator_list, n = nrow(incorporator_list))
print(incorporator_list.15N, n = nrow(incorporator_list.15N))
##Load data
#Coverage data
f_tibble <- readr::read_csv("mock_input_data/coverages_outliers.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequin_meta_outliers.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/seq_dilution_outliers.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 50
mag_tab_scaled_rlm <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab_scaled_lm <- SIPmg::scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE, save_plots = FALSE)
rlm_example = EBImage::readImage("rlm-example.png")
rlm_example = EBImage::resize(rlm_example,dim(rlm_example)[1]/2)
lm_example = EBImage::readImage("lm-example.png")
lm_example = EBImage::resize(lm_example,dim(lm_example)[1]/2)
filtered_lm_example = EBImage::readImage("filtered_lm-example.png")
fitlered_lm_example = EBImage::resize(filtered_lm_example,dim(filtered_lm_example)[1]/2)
cooksd_example = EBImage::readImage("cooksd-example.png")
cooksd_example = EBImage::resize(cooksd_example,dim(cooksd_example)[1]/2)
# Robust linear regression plot
EBImage::display(rlm_example)
#Linear regression plot without filtering sequin data
EBImage::display(lm_example)
#Cook's distance threshold of the data set
4/(length(mag_tab_scaled_lm$scale_fac$cooksd[[3]]))
#Cook's distance of the outlier before filtering the data
max(mag_tab_scaled_lm$scale_fac$cooksd[[3]])
#Before filtration
EBImage::display(cooksd_example)
#Linear regression plot with filtered outliers in sequin data
EBImage::display(filtered_lm_example)
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
rel.cov = SIPmg::coverage_normalization(f_tibble = f_tibble, approach = "relative_coverage")
mag.table = phyloseq::otu_table(as.matrix(rel.cov %>% tibble::column_to_rownames(var = "Feature")), taxa_are_rows = TRUE) #Phyloseq OTU table
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- readr::read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions = readr::read_csv("mock_input_data/fractions.csv")
taxonomy_tibble = dplyr::bind_rows(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if it has not been done yet
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled_lm <- SIPmg::scale_features_lm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, cook_filtering = TRUE, save_plots = FALSE)
mag_tab = as.matrix(mag_tab_scaled_lm$mag_tab) #Extract absolute abundances as a matrix
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = SIPmg::tax.table(taxonomy_tibble) # Create a taxonomy phyloseq object
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',
treatment_rep='Replicate',isotope = "13C",
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content, isotope = "13C", show_delbd_AFE = TRUE)
CI_threshold = 0
df_atomX_boot = df_atomX_boot %>%
dplyr::mutate(Incorporator_qSIP = A_CI_fcr_low > CI_threshold,
Incorporator_delbd = A_delbd - A_delbd_sd > 0,
OTU = stats::reorder(OTU, -A))
df_atomX_boot = df_atomX_boot %>%
dplyr::inner_join(taxonomy_tibble %>%
dplyr::select(user_genome, classification) %>%
dplyr::rename(OTU = user_genome))
windows = data.frame(density_min=c(1.71,1.72, 1.73),
density_max=c(1.74,1.75,1.76))
padj_cutoff = 0.05
#ncores = 6
#doParallel::registerDoParallel(ncores)
mw.hr.sip = SIPmg::HRSIP(physeq = phylo.qSIP, design = ~Isotope,
density_windows = windows,
sparsity_threshold = seq(0, 0.3, 0.05),
padj_cutoff = padj_cutoff)
View(df_atomX_boot)
mw.hr.sip = mw.hr.sip %>%
dplyr::mutate(incorp = padj < padj_cutoff)
#Get incorporator info
qSIP_incorp = df_atomX_boot %>%
dplyr::select(OTU, classification, A, Incorporator_qSIP) %>%
dplyr::filter(Incorporator_qSIP == TRUE) %>%
dplyr::select(-classification)
n_qSIP_incorp = nrow(qSIP_incorp)
delbd_incorp = df_atomX_boot %>%
dplyr::select(OTU, classification, A_delbd, Incorporator_delbd) %>%
dplyr::filter(Incorporator_delbd == TRUE) %>%
dplyr::select(-classification)
n_delbd_incorp = nrow(delbd_incorp)
mw.hr.sip_incorp = mw.hr.sip %>%
dplyr::select(OTU, taxa, incorp) %>%
dplyr::filter(incorp == TRUE) %>%
dplyr::rename("Incorporator_mw_hr.sip" = "incorp") %>%
dplyr::select(-taxa)
n_mw.hr.sip_incorp = nrow(mw.hr.sip_incorp)
all_incorp_tibble = dplyr::full_join(qSIP_incorp, dplyr::full_join(delbd_incorp, mw.hr.sip_incorp, by = "OTU"), by = "OTU")
#Print incorporator information
cat('Number of incorporators detected by qSIP:', n_qSIP_incorp, '\n')
cat('Number of incorporators detected by ΔBD:', n_delbd_incorp, '\n')
cat('Number of incorporators detected by MW-HR-SIP:', n_mw.hr.sip_incorp, '\n')
rmarkdown::paged_table(all_incorp_tibble)
sessionInfo()
