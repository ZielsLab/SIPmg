} else {
stop("Isotope is not recognized to do qSIP")
}
df_OTU_s = dplyr::mutate(df_OTU_s,
A = (Mlab - Mlight) / (Mheavymax - Mlight) * (1 - x))
return(df_OTU_s)
}
#' Reformat a phyloseq object of qSIP_atom_excess_MAGs analysis
#'
#' @param physeq  A phyloseq object
#' @param control_expr  An expression for identifying unlabeled control
#' samples in the phyloseq object (eg., "Substrate=='12C-Con'")
#' @param  treatment_rep  Which column in the phyloseq sample data designates
#' replicate treatments
#' @return numeric value: atom fraction excess (A)
qSIP_atom_excess_format_MAGs = function(physeq, control_expr, treatment_rep){
# formatting input
Buoyant_density <- Count <- NULL
cols = c('IS_CONTROL', 'Buoyant_density', treatment_rep)
df_OTU = phyloseq2table_1(physeq)
# removing 'infinite' BD values
tmp = colnames(df_OTU)
df_OTU = df_OTU %>%
dplyr::mutate(Buoyant_density = as.numeric(as.character(Buoyant_density)),
Count = as.numeric(as.character(Count))) %>%
dplyr::filter(! is.infinite(Buoyant_density)) %>%
dplyr::filter(! is.na(Buoyant_density)) %>%
as.data.frame
colnames(df_OTU) = tmp
# return
return(df_OTU)
}
#' Calculate atom fraction excess using q-SIP method
#'
#' @param physeq  A phyloseq object
#' @param control_expr  Expression used to identify control samples based on sample_data.
#' @param treatment_rep  Which column in the phyloseq sample data designates
#' replicate treatments
#' @param isotope  The isotope for which the DNA is labeled with ('13C' or '18O')
#' @param df_OTU_W  Keep NULL
#' @param Gi GC content of the MAG
#' @return A list of 2 data.frame objects. 'W' contains the weighted mean buoyant density (W) values for each OTU in each treatment/control. 'A' contains the atom fraction excess values for each OTU. For the 'A' table, the 'Z' column is buoyant density shift, and the 'A' column is atom fraction excess.
#' @export
#'
#' @examples
#' data(phylo.qSIP,GC_content)
#' ### Making atomX table
#' \donttest{
#' ## Not run::
#' ### BD shift (Z) & atom excess (A)
#' atomX = qSIP_atom_excess_MAGs(phylo.qSIP,
#'                          control_expr='Isotope=="12C"',
#'                          treatment_rep='Replicate',
#'                          Gi = GC_content)
#'}
qSIP_atom_excess_MAGs = function(physeq,
control_expr,
treatment_rep=NULL,
isotope='13C',
df_OTU_W=NULL,
Gi){
Buoyant_density <- Count <- IS_CONTROL <- OTU <- Replicate <- W <- Wm <- Wlab <- Wlight <- . <- Z <- Mlight <- NULL
# formatting input
if(is.null(df_OTU_W)){
no_boot = TRUE
} else {
no_boot = FALSE
}
if(no_boot){
df_OTU = qSIP_atom_excess_format_MAGs(physeq, control_expr, treatment_rep)
if(nrow(df_OTU) == 0){
stop('No rows in OTU table after qSIP_atom_excess_format_MAGs(). Check control_exp & treatment_rep')
}
# BD shift (Z)
df_OTU_W = df_OTU %>%
# weighted mean buoyant density (W)
dplyr::mutate(Buoyant_density = as.numeric(as.character(Buoyant_density)),
Count = as.numeric(as.character(Count))) %>%
dplyr::group_by(IS_CONTROL, OTU, Replicate) %>%
dplyr::summarize(W = stats::weighted.mean(Buoyant_density, Count, na.rm=TRUE)) %>%
dplyr::ungroup()
}
df_OTU_s = df_OTU_W %>%
# mean W of replicate gradients
dplyr::group_by(IS_CONTROL, OTU) %>%
dplyr::summarize(Wm = mean(W, na.rm=TRUE)) %>%
# BD shift (Z)
dplyr::group_by(OTU) %>%
dplyr::mutate(IS_CONTROL = dplyr::if_else(IS_CONTROL==TRUE, 'Wlight', 'Wlab')) %>%
tidyr::spread(IS_CONTROL, Wm) %>%
dplyr::mutate(Z = Wlab - Wlight) %>%
dplyr::ungroup()
# atom excess (A)
## Ensuring GC content is not in percentage format, but between 1 and 0
gc_syntax = all(dplyr::between(Gi$Gi, 0, 1))
if(gc_syntax == FALSE) {
Gi = Gi %>% dplyr::mutate(Gi = Gi/100)
}
## pt1: Add GC content to the dataframe, then calculate Mlight, and add to the dataframe
df_OTU_s = df_OTU_s %>%
dplyr::left_join(Gi %>% stats::setNames(.,c("OTU", "Gi")), by="OTU") %>%
dplyr::mutate(Mlight = 0.496 * Gi + 307.691)
## pt2: Calculate Mlab and Mheavymax and add to the dataframe
df_OTU_s = df_OTU_s %>%
dplyr::mutate(Mlab = (Z / Wlight + 1) * Mlight)
df_OTU_s = calc_Mheavymax_MAGs(isotope = isotope, df_OTU_s = df_OTU_s)
## pt3: Calculate AFE
df_OTU_s = calc_atom_excess_MAGs(isotope = isotope, df_OTU_s = df_OTU_s)
## flow control: bootstrap
if(no_boot){
return(list(W=df_OTU_W, A=df_OTU_s))
} else {
return(df_OTU_s)
}
}
# sampling with replacement from control & treatment for each MAG
sample_W = function(df, n_sample){
n_light = n_sample[1]
n_lab = n_sample[2]
# parsing df
df_light = df[df$IS_CONTROL==TRUE,]
df_lab = df[df$IS_CONTROL==FALSE,]
# sampling
if(length(df_light$W) > 1){
W_light = base::sample(df_light$W, n_light, replace=TRUE)
} else {
W_light = rep(df_light$W, n_light)
}
if(length(df_lab$W) > 1){
W_lab = base::sample(df_lab$W, n_lab, replace=TRUE)
} else {
W_lab = rep(df_lab$W, n_lab)
}
# creating new data.frames
df_light = data.frame(IS_CONTROL=TRUE,
#OTU=rep(otu, n_light),
W = W_light)
df_lab = data.frame(IS_CONTROL=FALSE,
#OTU=rep(otu, n_lab),
W = W_lab)
return(rbind(df_light, df_lab))
}
# shuffling weighted mean densities (W)
.qSIP_bootstrap = function(atomX,
isotope='13C',
n_sample=c(3,3),
bootstrap_id = 1, Gi = Gi){
data <- temp <- OTU <- NULL
# making a new (subsampled with replacement) dataset
n_sample = c(3,3)  # control, treatment
dots = stats::setNames(list(~lapply(data, sample_W, n_sample=n_sample)), "ret")
df_OTU_W = atomX$W %>%
dplyr::group_by(OTU) %>%
tidyr::nest() %>%
dplyr::mutate(temp = purrr::map(data, ~sample_W(.x, n_sample))) %>%
dplyr::select(-data) %>%
tidyr::unnest(cols = c(temp))
# calculating atom excess
atomX = qSIP_atom_excess_MAGs(physeq=NULL,
df_OTU_W=df_OTU_W,
control_expr=NULL,
treatment_rep=NULL,
isotope=isotope, Gi = Gi)
atomX$bootstrap_id = bootstrap_id
return(atomX)
}
#' Isotope incorporator list with GTDB taxonomy
#'
#' This function provides a table with MAGs and their corresponding GTDB taxonomy
#' as an output. This would be useful in identifying the taxa that have incorporation
#'
#' @param taxonomy A taxonomy tibble obtained in the markdown. This taxonomy tibble is
#' typically a concatenated list of archaeal and bacterial taxonomy from GTDB-Tk
#' Please check GTDB-Tk documentation for running the tool
#' @param bootstrapped_AFE_table A data frame indicating bootstrapped atom fraction excess values
#' @return A tibble with two columns, OTU and Taxonomy, with taxonomy of the incorporator MAGs
#' @export
#'
#'@examples
#'data(taxonomy_tibble,df_atomX_boot)
#'
#'\donttest{
#'
#' ### Making incorporator taxonomy list
#'incorporator_list = incorporators_taxonomy(taxonomy = taxonomy_tibble,
#'          bootstrapped_AFE_table = df_atomX_boot)
#'}
#'
incorporators_taxonomy = function(taxonomy, bootstrapped_AFE_table) {
taxonomy_classification = taxonomy$classification
empties <- c("p__", "c__", "o__", "f__", "g__", "s__")
taxonomy_list <- rep(NA, length(taxonomy_classification))
i = 1
for(tax in taxonomy_classification) {
spl <- strsplit(as.character(tax), ";")
spl <- setdiff(spl[[1]], empties)
cl <- utils::tail(spl, n=1)
taxonomy_list[i] <- cl
i = i + 1
}
bootstrapped_AFE_table = dplyr::mutate(bootstrapped_AFE_table, Taxonomy = taxonomy_list)
incorporator_list = bootstrapped_AFE_table %>%
dplyr::filter(.data$Incorporator == TRUE) %>%
dplyr::select(.data$OTU, .data$Taxonomy)
prefixes = c("p__|c__|o__|f__|g__|s__")
incorporator_list = dplyr::mutate(incorporator_list, Taxonomy = stringr::str_remove(incorporator_list[[2]], prefixes)) %>%
dplyr::rename("taxonomy" = "Taxonomy")
return(incorporator_list)
}
#' Remove MAGs with NAs from atomX table
#'
#' This function enables removing NAs from the atomX table.
#'
#' @param atomX A list object created by \code{qSIP_atom_excess_MAGs()}
#' @importFrom dplyr if_else
#' @return A list of 2 data.frame objects without MAGs which have NAs. 'W' contains the weighted mean buoyant density (W) values for each OTU in each treatment/control. 'A' contains the atom fraction excess values for each OTU. For the 'A' table, the 'Z' column is buoyant density shift, and the 'A' column is atom fraction excess.
#' @export
#'
#' @examples
#'data(atomX)
#'
#'\donttest{
#'
#'### Remove NAs in atomX table
#'atomx_no_na = filter_na(atomX)
#'}
#'
filter_na = function(atomX) {
W <- OTU <- OTU_na_list <- NULL
a_w = atomX$W
a_a = atomX$A
a_w_1 = a_w %>% dplyr::mutate(OTU_na_list = if_else(is.nan(W), OTU, "removed"))
na_otu = unique(a_w_1 %>% dplyr::select(OTU_na_list) %>% dplyr::filter(stringr::str_detect(OTU_na_list, "removed", negate = T)))
a_w = a_w_1 %>% dplyr::filter(!OTU %in% na_otu$OTU_na_list) %>% dplyr::select(-OTU_na_list)
a_a = a_a %>% dplyr::filter(!OTU %in% na_otu$OTU_na_list)
a_list = list(W = a_w, A = a_a)
return(a_list)
}
#' Calculate adjusted bootstrap CI after for multiple testing for atom fraction excess using q-SIP method. Multiple hypothesis tests are corrected by
#
#' @param atomX  A list object created by \code{qSIP_atom_excess_MAGs()}
#' @param isotope  The isotope for which the DNA is labeled with ('13C' or '18O')
#' @param n_sample  A vector of length 2. The sample size for data resampling (with replacement) for 1) control samples and 2) treatment samples.
#' @param n_boot  Number of bootstrap replicates.
#' @param a  A numeric value. The alpha for calculating confidence intervals.
#' @param parallel  Parallel processing. See \code{.parallel} option in \code{dplyr::mdply()} for more details.
#' @param ci_adjust_method Confidence interval adjustment method. Please choose 'FCR', 'Bonferroni', or 'none' (if no adjustment is needed). Default is FCR and also provides unadjusted CI.
#' @param Gi The G+C content of unlabeled DNA as a dataframe with "Feature" column having MAGs, contigs, or other features as rows, and a "Gi" column with GC content
#' @importFrom dplyr contains
#' @return A data.frame of atom fraction excess values (A) and atom fraction excess confidence intervals adjusted for multiple testing.
#' @export
#'
#' @examples
#' data(phylo.qSIP,GC_content)
#' \donttest{
#' ### BD shift (Z) & atom excess (A)
#' atomX = qSIP_atom_excess_MAGs(phylo.qSIP,
#'                         control_expr='Isotope=="12C"',
#'                         treatment_rep='Replicate', Gi = GC_content)
#'
#' ### Add doParallel::registerDoParallel(num_cores) if parallel bootstrapping is to be done
#' df_atomX_boot = qSIP_bootstrap_fcr(atomX, n_boot=5, parallel = FALSE)
#'}
#'
qSIP_bootstrap_fcr = function(atomX, isotope="13C", n_sample=c(3,3), ci_adjust_method ='fcr',
n_boot=10, parallel=FALSE, a=0.1, Gi){
A_CI_low <- Mlight <- Mlab <- Mheavymax <- A <- Z <- delbd_sd <- OTU <-  NULL
# atom excess for each bootstrap replicate
if (isotope == "13C" || isotope == "18O" || isotope == "15N") {
num_tests = nrow(atomX$A)
a_bonferroni = a/num_tests
df_boot_id = data.frame(bootstrap_id = 1:n_boot)
df_boot = plyr::mdply(df_boot_id, .qSIP_bootstrap,
atomX = atomX,
isotope=isotope,
n_sample=n_sample,
.parallel=parallel, Gi = Gi)
# calculating atomX CIs for each OTU
df_boot_1 = df_boot %>%
dplyr::group_by(OTU) %>%
dplyr::summarise(A_CI_low = stats::quantile(A, a/2, na.rm=TRUE),
A_CI_high = stats::quantile(A, a/2, na.rm=TRUE),
A_CI_bonferroni_low = stats::quantile(A, a_bonferroni/2, na.rm=TRUE),
A_CI_bonferroni_high = stats::quantile(A, 1-a_bonferroni/2, na.rm=TRUE),
A_sd = stats::sd(A),
delbd_sd = stats::sd(Z),
A_mean = mean(A))
discoveries = df_boot_1 %>%
dplyr::filter(A_CI_low > 0) %>%
nrow()
a_fcr = a*discoveries/num_tests
df_boot = df_boot %>%
dplyr::group_by(OTU) %>%
dplyr::summarise(A_CI_low = stats::quantile(A, a/2, na.rm=TRUE),
A_CI_high = stats::quantile(A, 1-a/2, na.rm=TRUE),
A_CI_fcr_low = stats::quantile(A, a_fcr/2, na.rm=TRUE),
A_CI_fcr_high = stats::quantile(A, 1-a_fcr/2, na.rm=TRUE),
A_CI_bonferroni_low = stats::quantile(A, a_bonferroni/2, na.rm=TRUE),
A_CI_bonferroni_high = stats::quantile(A, 1-a_bonferroni/2, na.rm=TRUE),
A_sd = stats::sd(A),
delbd_sd = stats::sd(Z),
A_mean = mean(A))
#df_boot = df_boot %>%
#  mutate(adj_p = stats::p.adjust(A_p_values, method = "BH"))
# combining with atomX summary data
df_boot = dplyr::inner_join(atomX$A, df_boot, c('OTU'='OTU'))
} else {
stop("You have used an isotope that does not have a qSIP model or perhaps the notation you used was wrong? In that case please check documentation on how to specify the isotope")
}
#df_boot = df_boot %>%
#  mutate(significance = (adj_p < a/2))
if (isotope == "13C") {
df_boot = df_boot %>%
dplyr::mutate(A_delbd = Z/0.036,
A_delbd_sd = delbd_sd/0.036)
} else if (isotope == "15N") {
df_boot = df_boot %>%
dplyr::mutate(A_delbd = Z/0.016)
} else {
df_boot = df_boot %>%
dplyr::select(-delbd_sd)
message("Isotope is not 13C or 15N so delta BD based AFE is not reported")
}
if (ci_adjust_method == "fcr") {
df_boot = df_boot %>%
dplyr::select(-contains("bonferroni"))
} else if (ci_adjust_method == "bonferroni") {
df_boot = df_boot %>%
dplyr::select(-contains("fcr"))
} else if (ci_adjust_method == "none") {
df_boot = df_boot %>%
dplyr::select(-contains(c("fcr", "bonferroni")))
} else {
stop("This package does not use the chosen multiple testing method. Please edit in the source code and upload if necessary, thanks!")
}
return(df_boot)
}
atomX_n = qSIP_atom_excess_MAGs(phylo.qSIP_n,
control_expr='Isotope=="14N"',
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content) #Change "parallel = FALSE" to compute using a single-core
#Bootstrap confidence intervals
df_atomX_boot_n = SIPmg::qSIP_bootstrap_fcr(atomX_n, n_boot=10, Gi = GC_content) #Change "parallel = FALSE" to compute using a single-core
View(df_atomX_boot)
View(df_atomX_boot_n)
#Bootstrap confidence intervals
df_atomX_boot_n = qSIP_bootstrap_fcr(atomX_n, n_boot=10, Gi = GC_content) #Change "parallel = FALSE" to compute using a single-core
library(SIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- readr::read_csv(file = "mock_input_data/GC_content.csv")
#Fractions
fractions = readr::read_csv("mock_input_data/fractions.csv")
taxonomy_tibble = dplyr::bind_rows(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if it has not been done yet
#mag_tab is a tibble with absolute concentrations of MAGs obtained by scaling MAG coverages using linear regression models on sequin coverages and concentration
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = SIPmg::tax.table(taxonomy_tibble) # Create a taxonomy phyloseq object
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="14N"',isotope = "15N",
treatment_rep='Replicate',
Gi = GC_content)
#Fractions
fractions = readr::read_csv("mock_input_data/fractions_15N.csv")
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object) # Make a phyloseq table for downstream qSIP analysis
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="14N"',isotope = "15N",
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content) #Change "parallel = FALSE" to compute using a single-core
View(df_atomX_boot)
library(SIPmg)
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
## Load data
#Coverage metadata
#Uncomment if your coverage data is in the format mentioned above for this file. Remains commented if you are using the output from `checkm coverage`
f_tibble <- readr::read_csv("mock_input_data/coverage_metadata.csv")
#Sequins metadata
sequins <- readr::read_csv(file="mock_input_data/sequins_metadata.csv")
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#Dilutions data
seq_dil = readr::read_csv(file = "mock_input_data/dilutions_data.csv")
#Log scale BOOLEAN. True or False depending on how you would want the MAG coverages to be scaled. Select TRUE if you need MAG concentrations scaled on the log scale
log_scale = TRUE
#coe_of_variation. Acceptable coefficient of variation for coverage and detection (eg. 20 - for 20 % threshold of coefficient of variation) (Coverages above the threshold value will be flagged in the plots)
coe_of_variation = 20
#Taxonomy
gtdbtk_bac_summary = readr::read_delim("mock_input_data/gtdbtk.bac120.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
gtdbtk_archaea = readr::read_delim("mock_input_data/gtdbtk.ar122.summary.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#GC content
GC_content <- readr::read_csv(file = "mock_input_data/GC_content.csv")
fractions.15N = readr::read_csv("mock_input_data/fractions_15N.csv")
#Fractions
fractions = readr::read_csv("mock_input_data/fractions.csv")
taxonomy_tibble = dplyr::bind_rows(gtdbtk_bac_summary, gtdbtk_archaea) #Combine bacteria and archaea taxonomy files if it has not been done yet
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
##Scale MAG coverages to obtain MAG absolute concentrations and save scaling plots in the working directory
#For rlm scaling using scale_features_rlm
#For rlm scaling using scale_features_lm
mag_tab_scaled <- SIPmg::scale_features_rlm(f_tibble, sequins, seq_dil, log_scale, coe_of_variation = coe_of_variation, save_plots = FALSE)
mag_tab = as.matrix(mag_tab_scaled$mag_tab) #Extract absolute abundances as a matrix
mag.table = phyloseq::otu_table(mag_tab, taxa_are_rows = TRUE) #Phyloseq OTU table
taxonomy.object = SIPmg::tax.table(taxonomy_tibble) # Create a taxonomy phyloseq object
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.obj
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
samples.object = SIPmg::sample.table(fractions) # Create a samples phyloseq object
samples.object.15N = SIPmg::sample.table(fractions.15N)
phylo.qSIP.15N = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object.15N) # Make a phyloseq table for downstream qSIP analysis
phylo.qSIP = SIPmg::phylo.table(mag.table, taxonomy.object, samples.object)
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',isotope = "13C",
treatment_rep='Replicate',
Gi = GC_content)
atomX = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP,
control_expr='Isotope=="12C"',isotope = "13C",
treatment_rep='Replicate',
Gi = GC_content)
atomX.15N = SIPmg::qSIP_atom_excess_MAGs(phylo.qSIP.15N,
control_expr='Isotope=="14N"',isotope = "15N",
treatment_rep='Replicate',
Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content)
#Bootstrap confidence intervals
df_atomX_boot = SIPmg::qSIP_bootstrap_fcr(atomX, n_boot=10, Gi = GC_content)
df_atomX_boot.15N = SIPmg::qSIP_bootstrap_fcr(atomX.15N, n_boot=10, Gi = GC_content)#Change "parallel = FALSE" to compute using a single-core
CI_threshold = 0
df_atomX_boot = df_atomX_boot %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
library(tidyverse)
df_atomX_boot = df_atomX_boot %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
df_atomX_boot.15N = df_atomX_boot.15N %>%
dplyr::mutate(Incorporator = A_CI_fcr_low > CI_threshold,
OTU = reorder(OTU, -A))
#Get incorporator info
n_incorp = df_atomX_boot %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
n_incorp.15N = df_atomX_boot.15N %>%
dplyr::filter(Incorporator == TRUE) %>%
nrow
#Get incorporator list
incorporator_list = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot)
incorporator_list.15N = SIPmg::incorporators_taxonomy(taxonomy = taxonomy_tibble, bootstrapped_AFE_table = df_atomX_boot.15N)
incorporator_list
incorporator_list.15N
incorporator_list.15N
incorporator_list
View(df_atomX_boot.15N)
View(df_atomX_boot)
#Print incorporator information
cat('Number of incorporators:', n_incorp, '\n')
cat('Number of incorporators if isotope were 15N:', n_incorp.15N, '\n')
print(incorporator_list, n = nrow(incorporator_list))
print(incorporator_list.15N, n = nrow(incorporator_list.15N))
9.974564+307.9429-(0.4987282*0.5079071)
3.517396+307.9429+(0.5024851*0.5079071)
View(df_atomX_boot.15N)
((308.1136-307.9429)/(311.7155-307.9429))*(1-0.003663004)
((308.1136-307.9429)/(317.6642-307.9429))*(1-0.01111233)
